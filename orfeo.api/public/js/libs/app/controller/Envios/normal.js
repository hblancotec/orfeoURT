/*
 * File: app/controller/Envios/normal.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ExtMVC.controller.Envios.normal', {
    extend: 'Ext.app.Controller',

    models: [
        'Envios.GrillaRadicadosEnviar',
        'Administracion.Dependencia',
        'Envios.FormaDeEnvio'
    ],
    stores: [
        'Envios.GrillaRadicadosEnviar',
        'Administracion.Dependencia',
        'Envios.FormasDeEnvio'
    ],
    views: [
        'Envios.PanelEnviosNormal',
        'Envios.PanelGrillaRadicados'
    ],

    refs: {
        cmbDependencia: '#cmbDependencia',
        btnChangeView: '#btnChangeView',
        btnEnviarRdicados: '#btnEnviarRdicados',
        cmbNroRegGrilla: '#cmbCantRegEnGrilla',
        frmEnviarRadicados: '#frmEnviarRadicados',
        enviosPanelEnviosNormal: '#idPanelEnviosNormal',
        enviosPanelGrillaRadicados: '#GrdRadicadosEnviar',
        btnEnviarRadicados: '#btnEnviarRadicados',
        enviosfrmAsignarGuiasObservaciones: '#wdwAsigGuiaObsMasiva',
        envioscmbFormasDeEnvio: '#cmbFormasDeEnvio'
    },

    control: {
        "#cmbDependencia": {
            select: 'onCmbDependencia'
        },
        "#cmbCantRegEnGrilla": {
            select: 'onCmbCantRegEnGrilla'
        },
        "#btnChangeView": {
            toggle: 'onBtnChangeView'
        },
        "#cmbFormasDeEnvio": {
            select: 'onCmbFormasDeEnvio'
        },
        "#GrdRadicadosEnviar": {
            afterrender: 'onGridpanelAfterRender'
        },
        "#txtPesoEnvio": {
            change: 'onTxtPesoEnvio'
        },
        "#btnEnviarRadicados": {
            click: 'onBtnEnviarRadicados'
        },
        "#btnAsignarMasivaGuiaObservacion": {
            click: 'onLunchWdwAsigGuiaObsMasiva'
        },
        "#btnWdwAsigObsGuiaMasiva": {
            click: 'onBtnWdwAsigObsGuiaMasiva'
        }
    },

    onCmbDependencia: function (combo, records, eOpts) {
        this.actualizarGrdRadicadosEnviar();
    },

    onCmbCantRegEnGrilla: function (combo, records, eOpts) {
        this.actualizarGrdRadicadosEnviar();
    },

    onBtnChangeView: function (button, pressed, eOpts) {
        var vista = Ext.getCmp('GrdRadicadosEnviar').getView();
        if (pressed) {
            button.setText('Ver Vista Radicados');
            Ext.getCmp('GrdRadicadosEnviar').setTitle('Listado de Radicados Generados por Masivas');
            Ext.getCmp('GrdRadicadosEnviar').setIcon('/orfeo.api/public/images/cart.gif');
			Ext.getCmp('GrdRadicadosEnviar').columns[12].setVisible(true);
            vista.getFeature('idGroupMasiva').enable();
            this.actualizarGrdRadicadosEnviar();
            vista.getFeature('idGroupMasiva').collapseAll();
        } else {
            button.setText('Ver Vista Masiva');
            Ext.getCmp('GrdRadicadosEnviar').setTitle('Listado de Radicados Generados Unitariamente');
            Ext.getCmp('GrdRadicadosEnviar').setIcon('/orfeo.api/public/images/document.gif');
            Ext.getCmp('GrdRadicadosEnviar').columns[12].setVisible(false);
            vista.getFeature('idGroupMasiva').disable();
            this.actualizarGrdRadicadosEnviar();
        }
        Ext.getCmp('GrdRadicadosEnviar').filters.clearFilters();
    },

    onCmbFormasDeEnvio: function (combo, records, eOpts) {
        if (records[0].data.exigepeso == 1) {
            Ext.getCmp('txtPesoEnvio').allowBlank = false;
        } else {
            Ext.getCmp('txtPesoEnvio').allowBlank = true;
            Ext.getCmp('txtPesoEnvio').setValue(0);
        }
        var band = this.actualizarValorUnitarioEnvio();
    },

    onGridpanelAfterRender: function (component, eOpts) {
        var vista = Ext.getCmp('GrdRadicadosEnviar').getView();
        vista.getFeature('idGroupMasiva').disable();
        this.actualizarGrdRadicadosEnviar();
    },

    onTxtPesoEnvio: function (field, newValue, oldValue, eOpts) {
        var band = this.actualizarValorUnitarioEnvio();
    },

    onBtnEnviarRadicados: function (button, e, eOpts) {
        var valFE = Ext.getCmp('cmbFormasDeEnvio');
        var valPE = Ext.getCmp('txtPesoEnvio');
        var strError = "";
        var obj2Json;
        var cntTmp = 1;
        var elemAborrar = new Array();
        //Obtenemos los registros seleccionados
        var regSel = Ext.getCmp('GrdRadicadosEnviar').getSelectionModel().getSelection();
        if (regSel.length > 0) {
            if (valFE.getValue() > 0 && valPE.getValue() !== null) {
                var valRE = new Array();
                for (var h = 0; h < regSel.length; h++) {
                    valRE.push(regSel[h].data.dircodigo);
                }
                var store = Ext.getCmp('GrdRadicadosEnviar').store;
                for (var j = 0 in regSel) {
                    cntTmp = (1 + parseInt(j));
                    Ext.getBody().mask("Enviando radicado " + cntTmp + " de " + regSel.length + " (" + regSel[j].data.radicado + ")");
                    Ext.Ajax.request({
                        url: '/orfeo.api/envio/setEnviosRadicadosJson',
                        method: 'POST',
                        async: false,
                        timeout: 180000,
                        params: {
                            valFE: Ext.JSON.encode(valFE.getValue()),
                            valPE: Ext.JSON.encode(valPE.getValue()),
                            valRE: Ext.JSON.encode(valRE),
							valDC: Ext.JSON.encode(regSel[j].data.dircodigo),
                            valDS: Ext.JSON.encode(regSel[j].data.destinatario),
                            valDD: Ext.JSON.encode(regSel[j].data.direccion),
                            valDT: Ext.JSON.encode(regSel[j].data.telefono),
                            valDP: Ext.JSON.encode(regSel[j].data.codpostal),
                            valDE: Ext.JSON.encode(regSel[j].data.correoelectronico),
                            valDG: Ext.JSON.encode(regSel[j].data.guia),
                            valDO: Ext.JSON.encode(regSel[j].data.observacion),
                            valRD: Ext.JSON.encode(regSel[j].data.radicado),
                            valEM: Ext.JSON.encode(((Ext.getCmp('btnChangeView').pressed) ? 1 : 0))
                        },
                        scope: this,
                        //method to call when the request is successful
                        success: function (response, opts) {
                            Ext.getBody().unmask();
                            obj2Json = Ext.JSON.decode(response.responseText, false);
                            if (obj2Json.success || obj2Json.success == 'true') {
                                var index = store.findExact('id', parseInt(obj2Json.id));
                                store.removeAt(index);
                                elemAborrar.push(parseInt(obj2Json.id));                  
                            } else {
                                strError = strError + obj2Json.message + '<br>';
                            }
                        },
                        failure: function (response, opts) {
                            Ext.getBody().unmask();
                            Ext.Msg.show({
                                title: 'Error',
                                msg: response.responseText,
                                buttons: Ext.Msg.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                        }
                    });
                }
                //Si hay registros enviados, los borramos del store
                if (elemAborrar.length > 0) {
                    store.remove(elemAborrar);
                }
                //Si hay error, lo visualizamos
                if (strError.length > 0) {
                    Ext.Msg.show({
                        title: 'Error',
                        msg: strError,
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                }
            } else {
                Ext.getCmp('lblValorPorRadicado').setValue('');
                Ext.Msg.show({
                    title: 'Error',
                    msg: 'Requiere gestionar Medio de envio, Peso y al menos un radicado del listado !!!',
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        } else
            Ext.Msg.show({
                title: 'Error',
                msg: 'No hay registros seleccionados !!!',
                buttons: Ext.Msg.OK,
                icon: Ext.MessageBox.ERROR
            });
    },

    onLunchWdwAsigGuiaObsMasiva: function (button, e, eOpts) {
        if (Ext.getCmp('GrdRadicadosEnviar').getSelectionModel().getSelection().length > 0) {
            var tmp = Ext.create('ExtMVC.view.Envios.frmAsignarGuiasObservaciones');
            tmp.show();
        } else {
            Ext.Msg.show({
                title: 'ERROR',
                msg: 'No hay registros seleccionados',
                buttons: Ext.Msg.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    onBtnWdwAsigObsGuiaMasiva: function (button, e, eOpts) {
        var regSels = Ext.getCmp('GrdRadicadosEnviar').getSelectionModel().getSelection();
        var store = Ext.getCmp('GrdRadicadosEnviar').store;
        for (var j in regSels) {
            if (Ext.getCmp('txtAsigGuiaMasiva').value > 0) {
                regSels[j].set('guia', Ext.getCmp('txtAsigGuiaMasiva').getValue());
            }
            if (Ext.getCmp('txtAsigObsMasiva').getValue().length > 0) {
                regSels[j].set('observacion', Ext.getCmp('txtAsigObsMasiva').getValue());
            }
        }
        Ext.getCmp('wdwAsigGuiaObsMasiva').close();
    },

    actualizarGrdRadicadosEnviar: function () {
        Ext.getCmp('GrdRadicadosEnviar').store.getProxy().extraParams.vgr = Ext.getCmp('btnChangeView').pressed;
        Ext.getCmp('GrdRadicadosEnviar').store.getProxy().extraParams.depe = Ext.getCmp('cmbDependencia').getValue();
        Ext.getCmp('GrdRadicadosEnviar').store.pageSize = Ext.getCmp('cmbCantRegEnGrilla').getValue();
        Ext.getCmp('GrdRadicadosEnviar').store.load();

    },

    actualizarValorUnitarioEnvio: function () {
        var valFE = Ext.getCmp('cmbFormasDeEnvio');
        var valPE = Ext.getCmp('txtPesoEnvio');
        //Obtenemos los registros seleccionados
        var regSel = Ext.getCmp('GrdRadicadosEnviar').getSelectionModel().getSelection();

        if (valFE.getValue() > 0 && valPE.getValue() !== null && regSel.length > 0) {

            var valRE = new Array();
            for (var h = 0; h < regSel.length; h++) {
                valRE.push(regSel[h].data.dircodigo);
            }
            Ext.Ajax.request({
                url: '/orfeo.api/tarifa/getTarifaJson',
                method: 'POST',
                params: {
                    valFE: Ext.JSON.encode(valFE.getValue()),
                    valPE: Ext.JSON.encode(valPE.getValue()),
                    valRE: Ext.JSON.encode(valRE),
                    valEM: Ext.JSON.encode(((Ext.getCmp('btnChangeView').pressed) ? 1 : 0))
                },
                scope: this,
                //method to call when the request is successful
                success: function (response, opts) {
                    var objJSON = Ext.JSON.decode(response.responseText, false);
                    if (objJSON.success) {
                        Ext.getCmp('lblValorPorRadicado').setValue(objJSON.message);
                    } else {
                        Ext.Msg.show({
                            title: 'Error',
                            msg: objJSON.message,
                            buttons: Ext.Msg.OK,
                            icon: Ext.MessageBox.ERROR
                        });
                    }
                },
                //method to call when the request is a failure
                failure: function (response, opts) {
                    Ext.getCmp('lblValorPorRadicado').setValue('');
                    Ext.Msg.show({
                        title: 'ERROR',
                        msg: response.status,
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                }
            });
        } else {
            Ext.getCmp('lblValorPorRadicado').setValue('');
            Ext.Msg.show({
                title: 'ALERTA',
                msg: 'Requiere gestionar Medio de envio, Peso y al menos un radicado del listado !!!',
                buttons: Ext.Msg.OK,
                icon: Ext.MessageBox.WARNING
            });
        }
    }
});
